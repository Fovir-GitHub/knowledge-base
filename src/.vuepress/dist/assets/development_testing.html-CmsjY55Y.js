import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,a as n,o as i}from"./app-BGTZnLUV.js";const a={};function o(r,e){return i(),s("div",null,e[0]||(e[0]=[n('<h2 id="unit-testing" tabindex="-1"><a class="header-anchor" href="#unit-testing"><span>Unit Testing</span></a></h2><p>Unit testing tests individual programs units or object classes, which should focus on testing the functionality of objects or methods.</p><p>It is a process of testing program components, and individual functions or methods are the simplest type of component.</p><h3 id="requirement-of-unit-testing-design" tabindex="-1"><a class="header-anchor" href="#requirement-of-unit-testing-design"><span>Requirement of Unit Testing Design</span></a></h3><p>When testing object classes, the design should be able to:</p><ul><li>Test all operations associated with the object.</li><li>Set and check the value of all attributes associated with the object.</li><li>Put the object into all possible states.</li></ul><h3 id="automated-unit-testing" tabindex="-1"><a class="header-anchor" href="#automated-unit-testing"><span>Automated Unit Testing</span></a></h3><p>Whenever possible, the unit testing should be automated.</p><p>In automated unit testing, developers make use of a test automation framework to write and run the program tests.</p><p>Unit testing frameworks provide generic test classes that allow developers to create specific test cases.</p><p>The automated unit testing can run all tests that developers have implemented and report on the success or failure of the tests.</p><h4 id="parts-of-automated-unit-testing" tabindex="-1"><a class="header-anchor" href="#parts-of-automated-unit-testing"><span>Parts of Automated Unit Testing</span></a></h4><p>An automated unit testing has three parts:</p><ol><li><strong>Setup Part:</strong> Initialize the system with the test cases, which is the inputs and outputs.</li><li><strong>Call Part:</strong> Call the object or method to be tested.</li><li><strong>Assertion Part:</strong> If the outputs of test match the expectations, then the assertion evaluates to true, which means the test has been successful. Otherwise, the assertion is false, meaning that the test has failed.</li></ol><h3 id="choose-unit-test-cases" tabindex="-1"><a class="header-anchor" href="#choose-unit-test-cases"><span>Choose Unit Test Cases</span></a></h3><p>Since testing is expensive and time-consuming, it is necessary to choose effective unit test cases. The effectiveness means:</p><ol><li>The test cases should show that, when used as expected, the component does what it is supposed to do.</li><li>If there are defects in the component, these should be revealed by test cases.</li></ol><h2 id="component-testing" tabindex="-1"><a class="header-anchor" href="#component-testing"><span>Component Testing</span></a></h2><p>Several individual units are integrated to create <strong>composite components</strong>.</p><p>The component testing focus on testing component interfaces and showing that the component interface behaves according to its specification.</p><h3 id="types-of-interface" tabindex="-1"><a class="header-anchor" href="#types-of-interface"><span>Types of Interface</span></a></h3><p>There are many types of interface between program components, and different types of interface error can occur.</p><ol><li>Parameter interfaces.</li><li>Shared memory interfaces.</li><li>Procedural interfaces.</li><li>Message passing interfaces.</li></ol><p>The interfaces above are in one component.</p><h3 id="guidelines-for-interface-testing" tabindex="-1"><a class="header-anchor" href="#guidelines-for-interface-testing"><span>Guidelines for Interface Testing</span></a></h3><ol><li>Examine the code to be tested and explicitly list each call to an external component.</li><li>Always test the interface with null pointer parameters.</li><li>Design test that deliberately cause the component to fail. Differing failure assumptions are one of the most common specification misunderstandings.</li><li>Design tests that generate much more messages than are likely to occur in practice. This is an effective way of revealing timing problems.</li><li>Design tests that vary the order in which these components are activated.</li></ol><h3 id="system-testing" tabindex="-1"><a class="header-anchor" href="#system-testing"><span>System Testing</span></a></h3><p>Some or all components are integrated to be a system to be tested as a whole.</p><p>The system testing focuses on testing component interactions.</p><p>System testing during development involves integration components to create a version of system and then testing the integrated system.</p><p>It checks that components are compatible, interact correctly and transfer the right data at the right time across their interfaces.</p><h4 id="system-testing-vs-component-testing" tabindex="-1"><a class="header-anchor" href="#system-testing-vs-component-testing"><span>System Testing VS Component Testing</span></a></h4><p>There are two important differences between system testing and component testing.</p><ol><li>During system testing, reusable components that have been separately developed, and off-the-shelf systems may be integrated with newly developed components. Then the complete system is tested.</li><li>Components developed by different team members or groups may be integrated at this stage. System testing is a collective rather than an individual process.</li></ol><h4 id="use-case-testing" tabindex="-1"><a class="header-anchor" href="#use-case-testing"><span>Use-Case Testing</span></a></h4>',35)]))}const h=t(a,[["render",o]]),p=JSON.parse(`{"path":"/sof/testing/stages/development_testing.html","title":"Development Testing","lang":"en-US","frontmatter":{"title":"Development Testing","icon":"fluent:developer-board-16-filled","date":"2025-06-07T00:00:00.000Z","description":"Unit Testing Unit testing tests individual programs units or object classes, which should focus on testing the functionality of objects or methods. It is a process of testing pr...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Development Testing\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-06-07T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Fovir\\",\\"url\\":\\"https://fovir.fyi\\"}]}"],["meta",{"property":"og:url","content":"https://fovir.fyi/sof/testing/stages/development_testing.html"}],["meta",{"property":"og:site_name","content":"Fovir's Knowledge Base"}],["meta",{"property":"og:title","content":"Development Testing"}],["meta",{"property":"og:description","content":"Unit Testing Unit testing tests individual programs units or object classes, which should focus on testing the functionality of objects or methods. It is a process of testing pr..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"article:published_time","content":"2025-06-07T00:00:00.000Z"}]]},"git":{},"readingTime":{"minutes":1.97,"words":591},"filePathRelative":"sof/testing/stages/development_testing.md","autoDesc":true}`);export{h as comp,p as data};
